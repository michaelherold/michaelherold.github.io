<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="https://michaeljherold.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://michaeljherold.com/" rel="alternate" type="text/html" /><updated>2017-06-26T19:17:31-05:00</updated><id>https://michaeljherold.com/</id><title type="html">Michael Herold</title><subtitle>Michael Herold is a software craftsman and Rubyist living in Omaha, Nebraska.
</subtitle><author><name>Michael Herold</name><email>michael@michaeljherold.com</email><uri>https://michaeljherold.com</uri></author><entry><title type="html">Four things to consider when using Redis in production</title><link href="https://michaeljherold.com/2017/06/25/four-things-to-consider-when-using-redis-in-production.html" rel="alternate" type="text/html" title="Four things to consider when using Redis in production" /><published>2017-06-25T17:40:00-05:00</published><updated>2017-06-25T17:40:00-05:00</updated><id>https://michaeljherold.com/2017/06/25/four-things-to-consider-when-using-redis-in-production</id><content type="html" xml:base="https://michaeljherold.com/2017/06/25/four-things-to-consider-when-using-redis-in-production.html">&lt;p&gt;Ruby programmers rely on &lt;a href=&quot;https://redis.io&quot;&gt;Redis&lt;/a&gt; as a high-performance key-value store for many different jobs. Redis is suitable for many different tasks, including caching, acting as the transport medium for a message bus, and service analytics. Redis is often one of the first external dependencies you reach for as a Ruby programmer because it forms the backbone of the &lt;a href=&quot;https://github.com/resque/resque&quot;&gt;Resque&lt;/a&gt; and &lt;a href=&quot;http://sidekiq.org/&quot;&gt;Sidekiq&lt;/a&gt; asynchronous job systems.&lt;/p&gt;

&lt;p&gt;When you’re starting a new project, it is tempting to set up the bare minimum configuration for Redis because it works well out of the box. However, once you’ve started to put some load on the system, there are several concerns that you should be aware of when using Redis. In this post, I’ll talk about some of these concerns and some high-level ways of addressing them.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Ruby programmers rely on &lt;a href=&quot;https://redis.io&quot;&gt;Redis&lt;/a&gt; as a high-performance key-value store for many different jobs. Redis is suitable for many different tasks, including caching, acting as the transport medium for a message bus, and service analytics. Redis is often one of the first external dependencies you reach for as a Ruby programmer because it forms the backbone of the &lt;a href=&quot;https://github.com/resque/resque&quot;&gt;Resque&lt;/a&gt; and &lt;a href=&quot;http://sidekiq.org/&quot;&gt;Sidekiq&lt;/a&gt; asynchronous job systems.&lt;/p&gt;

&lt;p&gt;When you’re starting a new project, it is tempting to set up the bare minimum configuration for Redis because it works well out of the box. However, once you’ve started to put some load on the system, there are several concerns that you should be aware of when using Redis. In this post, I’ll talk about some of these concerns and some high-level ways of addressing them.&lt;/p&gt;

&lt;p&gt;The four main concerns I will discuss in this post are monitoring, security, high availability and redundancy, and horizontal scalability. This is the first in a series of posts where I will cover these intermediate-to-advanced topics in depth.&lt;/p&gt;

&lt;h3&gt;Monitoring&lt;/h3&gt;

&lt;p&gt;Because Redis works so well out of the box, monitoring is something that can easily be put out of mind. However, once you start loading a lot of data into it, you will want to start monitoring your Redis instance to make sure it doesn’t run out of memory, all your commands are running quickly, and your connections are not being refused.&lt;/p&gt;

&lt;p&gt;Redis ships with a lot of intelligent monitoring tools. You can query the database for internal statistics about the system. It also tracks all queries that take longer than a specified threshold to complete. Lastly, you can get a feeling for what is taking up space in your database by randomly sampling keys and measuring their size.&lt;/p&gt;

&lt;p&gt;There are many ways to handle the random samples and there are &lt;a href=&quot;https://github.com/snmaynard/redis-audit&quot;&gt;many different&lt;/a&gt; sets of &lt;a href=&quot;https://github.com/antirez/redis-sampler&quot;&gt;tools to
help&lt;/a&gt; you do this type of auditing.&lt;/p&gt;

&lt;h3&gt;Security&lt;/h3&gt;

&lt;p&gt;Your clients, by default, communicate with Redis over an unencrypted TCP connection. That means that all of the data that you send over the wire to your Redis server can be read by intermediate parties. For this reason, the official Redis documentation &lt;a href=&quot;https://redis.io/topics/security&quot;&gt;advises you&lt;/a&gt; to only allow access to the Redis server from internal networks.&lt;/p&gt;

&lt;p&gt;If you host on a platform-as-a-service like Heroku, you do not have control over the IP addresses from which your application will connect to your Redis server. As such, you should add a TLS-terminating proxy in front of your Redis server to encrypt the traffic between your clients and Redis server.&lt;/p&gt;

&lt;h3&gt;High Availability and Redundancy&lt;/h3&gt;

&lt;p&gt;Having a single Redis server means that you’re trusting that the machine on which you’re running Redis will not have any hardware problems. This is the heart of high availability and redundancy.&lt;/p&gt;

&lt;p&gt;Redis has built-in support for running in a leader-follower topology. This functionality available directly through the Redis configuration. You also will want to run multiple instances of the &lt;a href=&quot;https://redis.io/topics/sentinel&quot;&gt;Redis Sentinel watcher daemon&lt;/a&gt; to handle the quorum decisions about leader election and failover.&lt;/p&gt;

&lt;p&gt;Aside from the direct benefit of redundancy, you may also be able to take advantage of distributing your read queries across the followers to take some of the load off the leader. There are caveats to this and whether or not you can use this functionality is highly dependent on your usage patterns, but it’s a nice benefit by itself and a great addition to the high availability setup.&lt;/p&gt;

&lt;h3&gt;Horizontal Scalability&lt;/h3&gt;

&lt;p&gt;When your workload gets big enough and the size of the database reaches beyond that which can be kept in memory, you will need to turn to another built-in feature of Redis: the &lt;a href=&quot;https://redis.io/topics/cluster-spec&quot;&gt;Redis Cluster system&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Redis Cluster shards your database across many different nodes. It does so by segmenting your data into “slots” that are distributed across your cluster nodes. Within the cluster, there are many leader-follower sets that use a gossip protocol to coordinate. The data slots are distributed among the leaders who then replicate their data to their followers.&lt;/p&gt;

&lt;p&gt;It’s worth noting that Redis Cluster only allows you to use one database, so if you use the multiple-database feature of Redis you will have to rethink how you want to handle that before implementing a Redis Cluster.&lt;/p&gt;

&lt;p&gt;Redis &lt;a href=&quot;https://github.com/antirez/redis/tree/4.0/utils/create-cluster&quot;&gt;ships with a script&lt;/a&gt; that will help you set up a Redis Cluster.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Redis is a wonderful piece of software. But, like all software, it takes some configuration to get the best out of it. While these four concerns are not an exhaustive list of what you should consider when using Redis at scale, they are the four concerns that I have had to handle throughout my career.&lt;/p&gt;

&lt;p&gt;Over the next few weeks, I will discuss each of these four concerns in depth and suggest ways that we can configure our applications to handle all of them. Since I am primarily a Ruby programmer, I will be focusing mostly on what these solutions look like from that perspective. However, there will be some system administration concerns as well.&lt;/p&gt;

&lt;p&gt;Are there some concerns you’ve had to address with Redis? Did I miss any big topics? Drop me a line &lt;a href=&quot;https://twitter.com/mherold&quot;&gt;on Twitter&lt;/a&gt; to let me know!&lt;/p&gt;</content><author><name>Michael Herold</name><email>michael@michaeljherold.com</email><uri>https://michaeljherold.com</uri></author><category term="redis" /><summary type="html">Ruby programmers rely on Redis as a high-performance key-value store for many different jobs. Redis is suitable for many different tasks, including caching, acting as the transport medium for a message bus, and service analytics. Redis is often one of the first external dependencies you reach for as a Ruby programmer because it forms the backbone of the Resque and Sidekiq asynchronous job systems.</summary></entry><entry><title type="html">Creating a subset font</title><link href="https://michaeljherold.com/2016/05/04/creating-a-subset-font.html" rel="alternate" type="text/html" title="Creating a subset font" /><published>2016-05-04T07:27:00-05:00</published><updated>2016-05-04T07:27:00-05:00</updated><id>https://michaeljherold.com/2016/05/04/creating-a-subset-font</id><content type="html" xml:base="https://michaeljherold.com/2016/05/04/creating-a-subset-font.html">&lt;p&gt;Using custom font faces on a web page introduces several potential issues. Most commonly, these issues manifest in one of two types of problem: the dreaded &amp;ldquo;flash of unstyled text&amp;rdquo; (FOUT) or &amp;ldquo;flash of invisible text&amp;rdquo; (FOIT); or poor initial render time due to font faces specified in blocking calls to outside services. By placing only a subset font in the critical render path, you can reduce the amount of FOUT/FOIT and speed up the initial render performance.&lt;/p&gt;

&lt;p&gt;However, the creation of the a subset font is not described anywhere that I found. This post discusses how I went about creating a subset font, the tools I used, and some thoughts on what exactly you should subset in your font.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Zach Leatherman (&lt;a href=&quot;https://twitter.com/zachleat&quot;&gt;@zachleat&lt;/a&gt;) has &lt;a href=&quot;http://www.zachleat.com/web/critical-webfonts/&quot;&gt;talked&lt;/a&gt; &lt;a href=&quot;http://www.zachleat.com/web/web-font-data-uris/&quot;&gt;a lot&lt;/a&gt; &lt;a href=&quot;http://www.zachleat.com/web/preload/&quot;&gt;about font loading strategies&lt;/a&gt; lately. While I understood the theory of the posts, I ran into a very simple problem when trying to figure out how to implement it: I had no idea how to create a subset font. I wanted to try his idea of a &amp;ldquo;flash of faux text,&amp;rdquo; but I had no idea how to create a subset font.&lt;/p&gt;

&lt;p&gt;I spent a while looking into it and figured out a way to make one. This post goes through the method that I used and some background about what exactly you do when subsetting a font.&lt;/p&gt;

&lt;h3&gt;What is a font?&lt;/h3&gt;

&lt;p&gt;A font is essentially a list of glyphs specified by addresses. If you are familiar with the ASCII table, you might remember that the letter &lt;em&gt;A&lt;/em&gt; corresponds to the number &lt;em&gt;45&lt;/em&gt;. That is, &lt;em&gt;A&lt;/em&gt; is at the &lt;em&gt;address&lt;/em&gt; &lt;em&gt;45&lt;/em&gt;. The font creator then encodes this list in one of the font formats:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Embedded OpenType (EOT)&lt;/li&gt;
&lt;li&gt;OpenType Font (OTF)&lt;/li&gt;
&lt;li&gt;TrueType Font (TTF)&lt;/li&gt;
&lt;li&gt;Web Open Font Face (WOFF)&lt;/li&gt;
&lt;li&gt;Web Open Font Face 2 (WOFF2)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At its heart, each of these formats is just a table of addresses and glyphs. There are some niceties like anti-alias hinting and ligatures that are available in different formats, but the table is what I am interested in.&lt;/p&gt;

&lt;h3&gt;What is a subset font?&lt;/h3&gt;

&lt;p&gt;Fonts with a small alphabet like Noto Sans in Balinese might only have ~47 glyphs, but if you need a font with the full Chinese-Japanese-Korean (CJK) glyph set you might be looking at hundreds or thousands of glyphs.&lt;/p&gt;

&lt;p&gt;A subset font tries to avoid this by only including the glyphs that are essential to show the most important content on a page. If you&amp;rsquo;re writing an English language website, you might only include the English alphabet and Arabic numerals: a total of 62 characters.&lt;/p&gt;

&lt;p&gt;The resulting file size of the subset font will be substantially smaller than the full-blown font. Currently on this site, I use a subset of the Noto Sans font for my website&amp;rsquo;s initial render. The subset font in the WOFF file format is 7.4KB on disk while the full font is 190KB. That&amp;rsquo;s a savings of 96.1% for the subset font.&lt;/p&gt;

&lt;h3&gt;How can I create one?&lt;/h3&gt;

&lt;p&gt;There are many tools out there (both open- and closed-source) for working with fonts. The one that I used to create my subset font is a Python library called &lt;a href=&quot;https://github.com/behdad/fonttools&quot;&gt;fonttools&lt;/a&gt;. It has a few command-line utilities for manipulating font files. &lt;code&gt;pyftsubset&lt;/code&gt; is the tool for subsetting and optimizing fonts.&lt;/p&gt;

&lt;p&gt;There are myriad options available in this tool. In the interest of brevity, I only cover the options that I use in creating the subset font.&lt;/p&gt;

&lt;aside&gt;
I want to take a moment to mention that you should only do this with a font that you have permission to modify. In the case of this article, I modify the Noto Sans font from Google under the &lt;a href=&quot;https://github.com/google/fonts/blob/c698ee1cbe301f79e6fe80c8cde18cb084384292/ofl/notosans/OFL.txt&quot;&gt;SIL Open Font License&lt;/a&gt;. This license allows modification and redistribution, much like the MIT License for open source code.
&lt;/aside&gt;

&lt;p&gt;Next, I list the command that I used, then discuss the options.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;pyftsubset NotoSans-Regular.ttf &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --unicodes&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;U+0020,U+0041-005A,U+0061-007A&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --layout-features&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --flavor&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;woff&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --output-file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotoSansSubset.woff&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First, the &lt;code&gt;NotoSans-Regular.ttf&lt;/code&gt; file is the font file that I started from.&lt;/p&gt;

&lt;p&gt;Next, I specify the glyphs to include in the subset font using the &lt;code&gt;--unicodes&lt;/code&gt; option. I include only the Latin alphabet (i.e. the standard alphabet used when writing in English) and the space character. These correspond to the following Unicode addresses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;U+0020&lt;/code&gt; is the standard space&lt;/li&gt;
&lt;li&gt;&lt;code&gt;U+0041-005A&lt;/code&gt; are the capital letters&lt;/li&gt;
&lt;li&gt;&lt;code&gt;U+0061-007A&lt;/code&gt; are the lowercase letters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After that, I list the layout features I include in the font using the &lt;code&gt;--layout-features&lt;/code&gt; option. These are things like ligatures that make the font more readable at the cost of file size. I commit a cardinal sin here and opt for none of them due to how I plan to use the font. Because I intend the page to only show this subset font as a &amp;ldquo;flash of faux text&amp;rdquo; I feel that leaving out the niceties is okay.&lt;/p&gt;

&lt;p&gt;Because of its relative space efficiency and &lt;a href=&quot;http://caniuse.com/#feat=woff&quot;&gt;wide availability of 88.13% on Can I Use&lt;/a&gt;, I pick WOFF as the file format for the font using the &lt;code&gt;--flavor&lt;/code&gt; option. The subset tool can only output WOFF or WOFF2, but you can take the resulting file into another tool to get a TrueType or OpenType font if you want.&lt;/p&gt;

&lt;p&gt;Lastly, I save the resulting file as &lt;code&gt;NotoSansSubset.woff&lt;/code&gt; using the &lt;code&gt;--output-file&lt;/code&gt; option.&lt;/p&gt;

&lt;h3&gt;What tradeoffs are there?&lt;/h3&gt;

&lt;p&gt;Subset fonts give you a smaller file to download to display &lt;em&gt;most&lt;/em&gt; of the important text on a page before the full fonts download. This means that you have to play a balancing game between font size and features.&lt;/p&gt;

&lt;p&gt;In an ideal world, you would serve web fonts that only contain the glyphs that you use on the first page, then rely on the full web font download afterward. However, if you want to serve up a static web page, this becomes tedious because you have to create a subset font for each page on your website. This means that it might be better to include more glyphs than you need on a page to cover a broader set of pages; basically, increasing the glyph count at the cost of a larger file size.&lt;/p&gt;

&lt;p&gt;The flip side of this is that you&amp;rsquo;re essentially forcing your visitors to download a glyph set twice: once in the subset font and once in the full web font. This is the crux of the balancing act. You don&amp;rsquo;t want to serve up more glyphs than is necessary because you want to cut the amount of repetitive data over the wire.&lt;/p&gt;

&lt;p&gt;I think a practical solution is to create one subset font that roughly follows the &lt;a href=&quot;https://en.wikipedia.org/wiki/Pareto_principle&quot;&gt;Pareto principle&lt;/a&gt;: cover 80% of the content on a first render. Distilling this down to a glyph count, I think that when writing English a good subset font will include only the alphabet (or perhaps the alphabet and numerals).&lt;/p&gt;

&lt;p&gt;Including only the alphabet allows the site visitor to start reading at the earliest moment. He or she might notice some missing punctuation or numbers, but your page is still understandable without it. You might disagree, so pick your own subset using a different set of rules!&lt;/p&gt;

&lt;h3&gt;Wrap up&lt;/h3&gt;

&lt;p&gt;Now you know what a subset font is and how to create one. Subset fonts are simple in concept but it&amp;rsquo;s not immediately clear how to create one. By using tools like &lt;code&gt;fonttools&lt;/code&gt;, you can make it easy to subset your own fonts.&lt;/p&gt;

&lt;p&gt;Subset fonts are one small optimization to make in your web performance strategy. By sending a smaller number of glyphs along the critical render path of your website, you can improve the time to first render and avoid the problems of a &amp;ldquo;flash of invisible text&amp;rdquo; or &amp;ldquo;flash of unstyled text&amp;rdquo; by using the subset font to show a &amp;ldquo;flash of faux text&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;However, subset fonts are only one piece of the puzzle for this technique. Doing this requires some client-side logic to do the font replacement. The next post in this series will discuss a strategy for doing this that I learned from the writings of &lt;a href=&quot;https://twitter.com/zachleat&quot;&gt;Zach Leatherman&lt;/a&gt;.&lt;/p&gt;</content><author><name>Michael Herold</name><email>michael@michaeljherold.com</email><uri>https://michaeljherold.com</uri></author><category term="fonts" /><category term="web performance" /><summary type="html">Using custom font faces on a web page introduces several potential issues. Most commonly, these issues manifest in one of two types of problem: the dreaded &amp;ldquo;flash of unstyled text&amp;rdquo; (FOUT) or &amp;ldquo;flash of invisible text&amp;rdquo; (FOIT); or poor initial render time due to font faces specified in blocking calls to outside services. By placing only a subset font in the critical render path, you can reduce the amount of FOUT/FOIT and speed up the initial render performance.</summary></entry></feed>