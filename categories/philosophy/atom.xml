<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: philosophy | Michael Herold]]></title>
  <link href="http://mherold.org/categories/philosophy/atom.xml" rel="self"/>
  <link href="http://mherold.org/"/>
  <updated>2013-11-06T17:42:51-05:00</updated>
  <id>http://mherold.org/</id>
  <author>
    <name><![CDATA[Michael Herold]]></name>
    <email><![CDATA[michael@mherold.org]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What is software craftsmanship?]]></title>
    <link href="http://mherold.org/2013/11/06/what-is-software-craftsmanship/"/>
    <updated>2013-11-06T15:48:00-05:00</updated>
    <id>http://mherold.org/2013/11/06/what-is-software-craftsmanship</id>
    <content type="html"><![CDATA[<p>In my first post, I stated that this blog will center around the idea of
<em>software craftsmanship</em>. This term may not be one that you&rsquo;re familiar
with. It&rsquo;s difficult to define, with people often relying on describing
the characteristics of a <em>software craftsman</em> instead. For a quick
reference, you can check out the <a href="http://en.wikipedia.org/wiki/Software_craftsmanship">Wikipedia article</a>, or the
<a href="http://manifesto.softwarecraftsmanship.org/">Software Craftsmanship Manifesto</a>, as quoted here:</p>

<blockquote><p>As aspiring Software Craftsmen we are raising the bar of professional
software development by practicing it and helping others learn the
craft. Through this work we have come to value:</p>

<ul>
<li>Not only working software, but also well-crafted software</li>
<li>Not only responding to change, but also steadily adding value</li>
<li>Not only individuals and interactions, but also a community of
professionals</li>
<li>Not only customer collaboration, but also productive partnerships</li>
</ul>


<p>That is, in pursuit of the items on the left, we have found the items
on the right ot be indispensable.</p></blockquote>

<p>I see software craftsmanship as an echo of the agile movement. The people
behind the agile movement rebelled against traditional structured
software processes. They said, &ldquo;But we build software for human beings!&rdquo;
And they started working closely with the people for whom they wrote
software. This is a positive thing. But it isn&rsquo;t enough.</p>

<p>A software developer can plateau in his or her career after reaching a
certain point. This type of developer feels he knows enough and always
draws upon the same well of techniques. In contrast, a software
craftsman &mdash; whether an apprentice, a journeyman, or a master &mdash; knows
that there is always room for improvement. He always seeks to grow, to
improve, to be better than he was yesterday. This focus on
self-improvement and professional development makes him an indispensible
team member, leader, and teacher.</p>

<p>Personally, I strive to improve my work every day. I don&rsquo;t mind
refactoring code if I realize it has any distinct smell to it. I&rsquo;ll even
throw out work that is subpar. I study elegant code and try to figure out
just what it is that makes it so. I know that I&rsquo;m not the best at my
craft and am not afraid to ask for help when I need it. I also read
constantly, so that I may have more knowledge to draw upon. I can&rsquo;t turn
myself into a master over night, but with many small steps, I know I will
make it there eventually.</p>

<p>If you&rsquo;re a software professional, you should seek to move from the ranks
of software engineers or software developers, and join the software
craftsmen. It will make you a better developer. If you don&rsquo;t already, you
will learn to take pride in what you do. What you&rsquo;re building is
beautiful, and could be something only you can do.</p>

<h3>Where can I start?</h3>

<p>If you&rsquo;re interested in knowing more, you can find some introductory
material at the following links:</p>

<ul>
<li><a href="http://blog.oshineye.com/2011/01/software-craftsmanship-more-than-just.html">Software Craftsmanship: More than just a manifesto</a>, by
Ade Oshineye</li>
<li><a href="http://www.codinghorror.com/blog/2008/06/the-ultimate-code-kata.html">The Ultimate Code Kata</a>, by Jeff Atwood</li>
</ul>


<p>For a more in-depth look, check out the following books:</p>

<ul>
<li><a href="http://amzn.com/020161622X?tag=michhero-20">The Pragmatic Programmer</a>, by Andrew Hunt and Dave Thomas</li>
<li><a href="http://amzn.com/0201733862?tag=michhero-20">Software Craftsmanship: The New Imperative</a>, by Pete McBreen</li>
<li><a href="http://amzn.com/0132350882?tag=michhero-20">Clean Code</a>, by Robert C. Martin</li>
</ul>


<h3>Discussion</h3>

<p>Do you believe software craftsmanship is something that everyone should
strive for? What are some good examples you have seen of software
craftsmanship? What are <strong>you going to do today</strong> to improve <em>your</em>
software craftsmanship? Share your thoughts in the comments!</p>

<p><sub><sup>Disclosure of Material Connection: Some of the links in the post
above are &ldquo;affiliate links.&rdquo; This means if you click on the link and
purchase the item, I will receive an affiliate commission. Regardless,
I only recommend products or services I use personally and believe will
add value to my readers. I am disclosing this in accordance with the
Federal Trade Commission&rsquo;s <a href="http://www.access.gpo.gov/nara/cfr/waisidx_03/16cfr255_03.html">16 CFR, Part 255</a>: &ldquo;Guides Concerning
the Use of Endorsements and Testimonials in Advertising.&rdquo;</sup></sub></p>
]]></content>
  </entry>
  
</feed>
